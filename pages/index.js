import axios, { Axios } from 'axios'
import Head from 'next/head'
import Image from 'next/image'
import { useEffect, useState } from 'react'
import 'bootstrap/dist/css/bootstrap.css'
import { BiCheck, BiPlus } from "react-icons/bi";
import { AiOutlineEdit, AiOutlineStop } from "react-icons/ai";
import { useRouter } from 'next/router'
import { BsBoxArrowInRight } from "react-icons/bs";



export default function Home({zonnes}) {
  const router =useRouter()

  const [showMe, setShowMe] = useState(false);
  function toggle(){
    setShowMe(!showMe);
  }
  const [zones, setZones] = useState([])
  const [name, setName] = useState('')
  const [color, setColor] = useState('')
  const [zone, setZone] = useState('')
  const [submitted, setSubmitted] = useState(false)
  const [status, setStatus] = useState(undefined);

  const [catss, setCatss] = useState([])
  const [isLoading, setLoading] = useState(false)

  useEffect(() => {
    setLoading(true)
    fetch('http://127.0.0.1:8000/api/cats')
      .then((res) => res.json())
      .then((data) => {
        setCatss(data)
        setLoading(false)
      })
  }, [])

  const timUrl = 'http://api.timezonedb.com/v2.1/list-time-zone?key=D63FT0JTYY6K'

  useEffect(() => {
    const getZones = async (tzone) => {

      const {data: res} = await axios(timUrl);
      setZones(res);

    };
    getZones();
  }, [])

  const apiUrl = 'http://127.0.0.1:8000/api'

  const deleteCat = async (catId) => {
      const response = await fetch(`http://127.0.0.1:8000/api/cats/${catId}/delete`,{
          method: 'DELETE'
      })
      const data = await response.json()
      window.location.reload()
      // console.log(data)
  }

  const submitHand = async (e) =>{
    e.preventDefault();
    const options = {
        method: "POST",
        body: JSON.stringify({
            name,
            color,
            zone
        }),
        headers:{
            'Content-Type':'application/json',

        }

    }
    fetch(`${apiUrl}/cats/create/`, options).
    then(res=>res.json()).then(response=> {
        
        setName('')
        setColor('')
        setZone('')
        setStatus({ type: 'success' });
        router.reload(window.location.pathname)
        setSubmitted(true)
        
    }).catch((error) => {
      setStatus({ type: 'error', error });
    });


  }
  
  let tzone =Intl.DateTimeFormat().resolvedOptions().timeZone

  let optis = {
    timeZone: tzone,
    hour: 'numeric',
    minute: 'numeric',
    second: 'numeric',
  },
  formatterr = new Intl.DateTimeFormat([], optis);
  var ttime =  formatterr.format(new Date())
  

  return (

    <div className="conatiner">
      <Head>
        <title>Cat Tracker</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />

        <nav className="navbar navbar-expand-lg navbar-dark" style={{backgroundColor:'blue'}}>
    <div className="container-fluid">
      <a className="navbar-brand" href="/"
      style={{fontWeight:"bold"}}
      >Cat Tracker</a>

      <div className="" id="navbarText">
        <ul className="navbar-nav me-auto mb-2 mb-lg-0">
          <li className="nav-item">
          </li>
          <li className="nav-item">
          </li>
          <li className="nav-item">
          </li>
        </ul>
        <span className="navbar-text text-white" style={{fontWeight:"bold"}}>
          Current Time
          <br/>
          <small style={{fontWeight:'lighter'}}>{ttime} ({tzone})</small>
          
          
        </span>
      </div>
    </div>
  </nav>
      </Head>
      <div className='conatiner p-3'>
        <div className='row mt-2 mb-2'>
          <div className='col-md-2 mt-2 mb-2'></div>
          <div className='col-md-8 mt-2 mb-2'>
          {status?.type === 'success' && 
          <p class="alert alert-success" role="alert">
          Cat added successfully
        </p>}
      {status?.type === 'error' && (
        <p class="alert alert-danger" role="alert">
        Sorry an error occured
      </p>
      )}
            {catss.map((cat) => (
              <div key={cat.id} 
              // onClick={() => router.push(`/cats/${cat.id}`)}
              className='card shadow-lg mt-2 mb-2' style={{borderRadius:'15px'}}>
              <div className='card-body'>
                <div>
                  <h5 style={{marginBottom:'-3px'}} className='card-text'>{cat.name}
                  <span>
                    <button onClick={() => deleteCat(cat.id)} className='btn btn-sm text-white' style={{float:'right', borderRadius:'15px', backgroundColor:'red', outline:'red'}}>x Delete</button>
                  </span>
                  </h5>
                  <p style={{marginBottom:'-3px'}} className='card-text'>Color: {cat.color}</p>
                  <p style={{marginBottom:'-3px'}} className='card-text'>Current Time: {cat.zone}({new Date().toLocaleString('en-US', {hour: '2-digit', minute:'2-digit', second:'2-digit', timeZone: cat.zone })})
                  <span>
                    {/* <button  className='btn btn-sm text-white' style={{float:'right', borderRadius:'15px', backgroundColor:'blue', outline:'red'}}> 
                    <AiOutlineEdit size={15} style={{margin:'5px'}} />
                    Edit</button> */}
                    <p style={{float:'right', cursor:'pointer', color:'blue'}} onClick={() => router.push(`/cats/${cat.id}`)}><small>
                      edit</small>
                      <BsBoxArrowInRight size={15} style={{margin:'5px'}} />
                      </p>
                  </span>
                  </p>
                </div>
              </div>
            </div>

            ))}
            <div style={{float:'right'}}>
            <button onClick={toggle} className='btn btn-md' style={{borderRadius:'18px', margin:'5px', backgroundColor:'#D3D3D3', outline:'#D3D3D3'}}>
            <BiPlus size={15} style={{margin:'5px'}}/>
            Add cat</button>
            </div>

            <div className='card shadow-lg mt-2 mb-2' style={{borderRadius:'15px',display: showMe?"block":"none"}}>
            <div className='card-body'>
              <form onSubmit={submitHand} className='pb-4'>
              <div className="row">
                <div className="form-group col">
                  <label for="inputName">Name</label>
                  <input required
                  style={{borderRadius:'15px', outline:'none'}}
                  onChange={e => setName(e.target.value)} value={name} type="text" className="form-control shadow-lg" id="inputName" />
                </div>
                <div className="form-group col">
                  <label for="inputColor">Color</label>
                  <input required
                  style={{borderRadius:'15px', outline:'none'}} 
                  onChange={e => setColor(e.target.value)} value={color} type="text" className="form-control shadow-lg" id="inputColor" />
                </div>
              </div>
              <div className="form-group">
                <label for="inputZone">Time Zone</label>
                <select  required
              onChange={e => setZone(e.target.value)} value={zone}
              style={{borderRadius:'15px', outline:'none'}} class="form-select shadow-lg" aria-label="Default select example">
                <option selected>Open this select menu</option>
                {zonnes.map((zonee) => (
              <option value={zonee}>{zonee}</option>

            ))}
               
              </select>
              </div>
              <div style={{float:'right'}} className="form-row pb-3">
              <button onClick={toggle} className=' btn btn-sm' style={{borderRadius:'15px', margin:'5px', backgroundColor:'#D3D3D3', outline:'#D3D3D3'}}>
                <AiOutlineStop size={15}/>
                cancel</button>
              <button className='btn btn-sm text-white'style={{borderRadius:'15px', backgroundColor:'green', outline:'green'}}  type='submit'>
                <BiCheck size={15}/>
                Save</button>
              </div>
              
            </form>

            </div>

            </div>

          </div>
          <div className='col-md-2 mt-2 mb-2'>
          </div>
        </div>
      </div>



    </div>
 
  )
}

export async function getStaticProps(context) {
  // fetch the blog posts from the mock API
  // const res = await fetch('http://127.0.0.1:8000/api/cats');
  const ress = await fetch('http://worldtimeapi.org/api/timezone');
  const zonnes = await ress.json();
  // const catss = await res.json();

  
  return {
      props: {zonnes } // props will be passed to the page
  };
  } 

  